// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0--rc2
// source: report.proto

package report

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportRequest) Reset() {
	*x = ReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRequest) ProtoMessage() {}

func (x *ReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRequest.ProtoReflect.Descriptor instead.
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{0}
}

type StateCovidData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State               string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Updated             uint64 `protobuf:"varint,2,opt,name=updated,proto3" json:"updated,omitempty"`
	Cases               uint64 `protobuf:"varint,3,opt,name=cases,proto3" json:"cases,omitempty"`
	TodayCases          uint64 `protobuf:"varint,4,opt,name=todayCases,proto3" json:"todayCases,omitempty"`
	Deaths              uint64 `protobuf:"varint,5,opt,name=deaths,proto3" json:"deaths,omitempty"`
	TodayDeaths         uint64 `protobuf:"varint,6,opt,name=todayDeaths,proto3" json:"todayDeaths,omitempty"`
	Recovered           uint64 `protobuf:"varint,7,opt,name=recovered,proto3" json:"recovered,omitempty"`
	Active              uint64 `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty"`
	CasesPerOneMillion  uint64 `protobuf:"varint,9,opt,name=casesPerOneMillion,proto3" json:"casesPerOneMillion,omitempty"`
	DeathsPerOneMillion uint64 `protobuf:"varint,10,opt,name=deathsPerOneMillion,proto3" json:"deathsPerOneMillion,omitempty"`
	Tests               uint64 `protobuf:"varint,11,opt,name=tests,proto3" json:"tests,omitempty"`
	TestsPerOneMillion  uint64 `protobuf:"varint,12,opt,name=testsPerOneMillion,proto3" json:"testsPerOneMillion,omitempty"`
	Population          uint64 `protobuf:"varint,13,opt,name=population,proto3" json:"population,omitempty"`
}

func (x *StateCovidData) Reset() {
	*x = StateCovidData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateCovidData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateCovidData) ProtoMessage() {}

func (x *StateCovidData) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateCovidData.ProtoReflect.Descriptor instead.
func (*StateCovidData) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{1}
}

func (x *StateCovidData) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StateCovidData) GetUpdated() uint64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *StateCovidData) GetCases() uint64 {
	if x != nil {
		return x.Cases
	}
	return 0
}

func (x *StateCovidData) GetTodayCases() uint64 {
	if x != nil {
		return x.TodayCases
	}
	return 0
}

func (x *StateCovidData) GetDeaths() uint64 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *StateCovidData) GetTodayDeaths() uint64 {
	if x != nil {
		return x.TodayDeaths
	}
	return 0
}

func (x *StateCovidData) GetRecovered() uint64 {
	if x != nil {
		return x.Recovered
	}
	return 0
}

func (x *StateCovidData) GetActive() uint64 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *StateCovidData) GetCasesPerOneMillion() uint64 {
	if x != nil {
		return x.CasesPerOneMillion
	}
	return 0
}

func (x *StateCovidData) GetDeathsPerOneMillion() uint64 {
	if x != nil {
		return x.DeathsPerOneMillion
	}
	return 0
}

func (x *StateCovidData) GetTests() uint64 {
	if x != nil {
		return x.Tests
	}
	return 0
}

func (x *StateCovidData) GetTestsPerOneMillion() uint64 {
	if x != nil {
		return x.TestsPerOneMillion
	}
	return 0
}

func (x *StateCovidData) GetPopulation() uint64 {
	if x != nil {
		return x.Population
	}
	return 0
}

var File_report_proto protoreflect.FileDescriptor

var file_report_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xae, 0x03, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x43, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x43, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x61, 0x73, 0x65, 0x73, 0x50, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x50, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x50, 0x65, 0x72, 0x4f, 0x6e, 0x65,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x73, 0x50, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4f, 0x6e,
	0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x57, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x4d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x15,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30,
	0x01, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_report_proto_rawDescOnce sync.Once
	file_report_proto_rawDescData = file_report_proto_rawDesc
)

func file_report_proto_rawDescGZIP() []byte {
	file_report_proto_rawDescOnce.Do(func() {
		file_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_report_proto_rawDescData)
	})
	return file_report_proto_rawDescData
}

var file_report_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_report_proto_goTypes = []interface{}{
	(*ReportRequest)(nil),  // 0: report.ReportRequest
	(*StateCovidData)(nil), // 1: report.StateCovidData
}
var file_report_proto_depIdxs = []int32{
	0, // 0: report.Report.GetCovidDataForAllStates:input_type -> report.ReportRequest
	1, // 1: report.Report.GetCovidDataForAllStates:output_type -> report.StateCovidData
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_report_proto_init() }
func file_report_proto_init() {
	if File_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateCovidData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_report_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_report_proto_goTypes,
		DependencyIndexes: file_report_proto_depIdxs,
		MessageInfos:      file_report_proto_msgTypes,
	}.Build()
	File_report_proto = out.File
	file_report_proto_rawDesc = nil
	file_report_proto_goTypes = nil
	file_report_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportClient is the client API for Report service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportClient interface {
	GetCovidDataForAllStates(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (Report_GetCovidDataForAllStatesClient, error)
}

type reportClient struct {
	cc grpc.ClientConnInterface
}

func NewReportClient(cc grpc.ClientConnInterface) ReportClient {
	return &reportClient{cc}
}

func (c *reportClient) GetCovidDataForAllStates(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (Report_GetCovidDataForAllStatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Report_serviceDesc.Streams[0], "/report.Report/GetCovidDataForAllStates", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportGetCovidDataForAllStatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Report_GetCovidDataForAllStatesClient interface {
	Recv() (*StateCovidData, error)
	grpc.ClientStream
}

type reportGetCovidDataForAllStatesClient struct {
	grpc.ClientStream
}

func (x *reportGetCovidDataForAllStatesClient) Recv() (*StateCovidData, error) {
	m := new(StateCovidData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReportServer is the server API for Report service.
type ReportServer interface {
	GetCovidDataForAllStates(*ReportRequest, Report_GetCovidDataForAllStatesServer) error
}

// UnimplementedReportServer can be embedded to have forward compatible implementations.
type UnimplementedReportServer struct {
}

func (*UnimplementedReportServer) GetCovidDataForAllStates(*ReportRequest, Report_GetCovidDataForAllStatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCovidDataForAllStates not implemented")
}

func RegisterReportServer(s *grpc.Server, srv ReportServer) {
	s.RegisterService(&_Report_serviceDesc, srv)
}

func _Report_GetCovidDataForAllStates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).GetCovidDataForAllStates(m, &reportGetCovidDataForAllStatesServer{stream})
}

type Report_GetCovidDataForAllStatesServer interface {
	Send(*StateCovidData) error
	grpc.ServerStream
}

type reportGetCovidDataForAllStatesServer struct {
	grpc.ServerStream
}

func (x *reportGetCovidDataForAllStatesServer) Send(m *StateCovidData) error {
	return x.ServerStream.SendMsg(m)
}

var _Report_serviceDesc = grpc.ServiceDesc{
	ServiceName: "report.Report",
	HandlerType: (*ReportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCovidDataForAllStates",
			Handler:       _Report_GetCovidDataForAllStates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "report.proto",
}
